import * as express from "express";
import {
  deletePNTokensSchema,
  IUpsertPNToken,
  upsertPNTokenSchema,
} from "../../dtos/pntokens/v1/pn-tokens.validators";
import { validateIncomingRequest } from "../../middlewares/validateIncomingRequest.middleware";
import { ENotificationDevice } from "../../models/pntokens";
import PushNotificationControllerV1 from "../controllers/pushNotificationController.v1";
/**
 * @swagger
 * tags:
 *  name: Push_Notifications
 *  description: Puhs notifications related APIS
 * */
/**
 * @swagger
 * tags:
 *  name: Notifications_Admin
 *  description: Notifications related APIs for Admin Only
 * */
/**
 * @swagger
 * components:
 *      schemas:
 *          PNToken:
 *                                 type: object
 *                                 description: Push Notification Token entity
 *                                 properties:
 *                                        userId:
 *                                               type: string
 *                                               description: Id of the user
 *                                        token:
 *                                               type: string
 *                                               description: Actual firebase token
 *                                        ip:
 *                                               type: string
 *                                               description: IP address of the device
 *                                        clientId:
 *                                                type: string
 *                                                description: Integration specific id
 *                                        device:
 *                                                type: string
 *                                                description: Device type
 *                                                default: "WEB|IOS|ANDROID|OTHERS"
 *                                        expireAt:
 *                                                type: string
 *                                                description: When the token will be expired
 */
class PushNotificationV1 {
  public path = "/v1/push-notifications";
  public router = express.Router();
  public pushNotificationController: PushNotificationControllerV1;
  constructor() {
    this.pushNotificationController = new PushNotificationControllerV1();

    this.router.get(`${this.path}/test`, this.GetDummyPushNotification);

    this.router.patch(
      `${this.path}/upsert-token`,
      validateIncomingRequest(upsertPNTokenSchema),
      this.UpsertPNToken
    );

    this.router.delete(
      `${this.path}/remove`,
      validateIncomingRequest(deletePNTokensSchema),
      this.DeletePNTokens
    );
  }

  /**
   * @swagger
   * /v1/push-notifications/test:
   *  get:
   *      tags:
   *          - Push_Notifications
   *      summary: Get a dummy push notification
   *      parameters:
   *        - in: query
   *          name: fcmToken
   *          type: string
   *          required: false
   *          description: FCM token generated by the service worker
   *      responses:
   *          '422':
   *              description: If any validation error occurs
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Failure'
   *          '200':
   *              description: Request process successfully
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Success'
   *                            data:
   *                                type: object
   *                                properties:
   *                                    message:
   *                                          type: string
   *          '404':
   *              description: Route not found
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Failure'
   *                            data:
   *                                type: object
   *                                properties:
   *                                    message:
   *                                          type: string
   *
   * */
  private GetDummyPushNotification = async (
    req: express.Request,
    res: express.Response
  ) => {
    const fcmToken = (req.query?.fcmToken ?? "testing") + "";
    const isSent =
      await this.pushNotificationController.sendDummyPushNotification(fcmToken);
    if (isSent) {
      return res.status(200).send("Notification will be sent");
    } else {
      return res.status(500).send("Unable to send notification");
    }
  };

  /**
   * @swagger
   * /v1/push-notifications/remove:
   *  delete:
   *      tags:
   *          - Push_Notifications
   *      summary: Delete previously set notifications
   *      parameters:
   *        - in: query
   *          name: clientId
   *          type: string
   *          required: true
   *          description: client specific id
   *        - in: query
   *          name: userId
   *          type: string
   *          required: true
   *          description: user id
   *        - in: query
   *          name: ip
   *          type: string
   *          required: false
   *          description: ip used to set the token
   *      responses:
   *          '422':
   *              description: If any validation error occurs
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Failure'
   *          '200':
   *              description: Request process successfully
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Success'
   *                            data:
   *                                type: object
   *                                properties:
   *                                    message:
   *                                          type: string
   *          '404':
   *              description: Route not found
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Failure'
   *                            data:
   *                                type: object
   *                                properties:
   *                                    message:
   *                                          type: string
   *
   * */
  private DeletePNTokens = async (
    req: express.Request,
    res: express.Response
  ) => {
    let params = {
      clientId: req.query?.clientId as string,
      ip: req.query?.ip ? (req.query?.ip as string) : null,
      userId: req?.query?.userId as string,
    };
    let data = await this.pushNotificationController.deletePNTokenService(
      params
    );
    return res.status(data.statusCode).send(data.toSend);
  };

  /**
   * @swagger
   * /v1/push-notifications/upsert-token:
   *  patch:
   *      tags:
   *          - Push_Notifications
   *      summary: update your fcm token
   *      requestBody:
   *          content:
   *              application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            clientId:
   *                                type: string
   *                            userId:
   *                                type: string
   *                            ip:
   *                                type: string
   *                            device:
   *                                type: string
   *                                default: "OTHERS"
   *                            token:
   *                                type: string
   *
   *      responses:
   *          '422':
   *              description: If any validation error occurs
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Failure'
   *          '200':
   *              description: Request process successfully
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Success'
   *                            data:
   *                                type: object
   *                                properties:
   *                                    message:
   *                                          type: string
   *                                    data:
   *                                          $ref: '#/components/schemas/PN_Token'
   *          '404':
   *              description: Route not found
   *              content:
   *                application/json:
   *                  schema:
   *                      type: object
   *                      properties:
   *                            Message:
   *                                 type: string
   *                                 default: 'Failure'
   *                            data:
   *                                type: object
   *                                properties:
   *                                    message:
   *                                          type: string
   *
   *
   * */
  private UpsertPNToken = async (
    req: express.Request,
    res: express.Response
  ) => {
    let params: IUpsertPNToken = {
      clientId: req.body?.clientId as string,
      device: req.body?.device as ENotificationDevice,
      ip: req.body?.ip ? (req.body?.ip as string) : null,
      token: req.body?.token as string,
      userId: req?.body?.userId as string,
    };
    let data = await this.pushNotificationController.upsertPNTokenService(
      params
    );
    return res.status(data.statusCode).send(data.toSend);
  };
}

export default PushNotificationV1;
